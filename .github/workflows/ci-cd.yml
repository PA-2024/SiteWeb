name: PHP CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: '20'
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install PHP_CodeSniffer
        run: composer require --dev "squizlabs/php_codesniffer=*"
      - name: Make PHP_CodeSniffer Executable
        run: chmod +x ./vendor/bin/phpcs
      - name: Check PSR-2 Compliance
        run: ./vendor/bin/phpcs --standard=PSR2 src/

  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download PHP Security Checker
        run: |
          curl -Ls https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_amd64 -o local-php-security-checker
          chmod +x local-php-security-checker
      - name: Run Security Checker
        run: ./local-php-security-checker --path=composer.lock

  test:
    runs-on: ubuntu-latest
    needs: [code-quality, security-check]
    steps:
    - uses: actions/checkout@v3
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
    - name: Install Dependencies
      run: composer install --no-progress --prefer-dist
    - name: Make PHPUnit Executable
      run: chmod +x ./vendor/bin/phpunit
    - name: Run Tests
      run: ./vendor/bin/phpunit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: ${{ steps.deploy.outputs.url }}
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: FTP Deploy
      uses: SamKirkland/FTP-Deploy-Action@4.0.0
      with:
        server: 185.207.226.14
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./
        server-dir: httpdocs/
        
  performance-test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C780D0BDB1A69C86
          echo "deb https://dl.k6.io/deb stable main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install k6
      - name: Run performance tests
        run: k6 run tests/performance-test.js
        env:
          BASE_URL: ${{ steps.deploy.outputs.url }}