using System;
using System.Net.WebSockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace StudentClient
{
    class Program
    {
        static async Task Main(string[] args)
        {
            using (var webSocket = new ClientWebSocket())
            {
                await webSocket.ConnectAsync(new Uri("ws://localhost:8080/qcm/2"), CancellationToken.None);

                // Send JOIN_STUDENT message
                var joinMessage = new
                {
                    action = "JOIN_STUDENT",
                    studentId = "1",
                    studentName = "StudentName"
                };
                var joinMessageString = JsonConvert.SerializeObject(joinMessage);
                var joinMessageBytes = Encoding.UTF8.GetBytes(joinMessageString);
                await webSocket.SendAsync(new ArraySegment<byte>(joinMessageBytes), WebSocketMessageType.Text, true, CancellationToken.None);

                Console.WriteLine("Connected as Student.");

                var receiveBuffer = new byte[1024];

                // Listen for messages
                while (webSocket.State == WebSocketState.Open)
                {
                    var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(receiveBuffer), CancellationToken.None);
                    var message = Encoding.UTF8.GetString(receiveBuffer, 0, result.Count);
                    Console.WriteLine($"Received: {message}");

                    dynamic receivedMessage = JsonConvert.DeserializeObject(message);
                    string action = receivedMessage.action;

                    if (action == "QUESTION")
                    {
                        // Handle the received question
                        int questionId = receivedMessage.id;
                        string questionText = receivedMessage.text;
                        var options = receivedMessage.options.ToObject<List<dynamic>>();

                        Console.WriteLine($"Question {questionId}: {questionText}");
                        foreach (var option in options)
                        {
                            Console.WriteLine($"{option.id}. {option.text}");
                        }

                        // Send a sample answer
                        var answerMessage = new
                        {
                            action = "ANSWER",
                            studentId = "1",
                            answer = options[0].id // Replace with actual answer
                        };
                        var answerMessageString = JsonConvert.SerializeObject(answerMessage);
                        var answerMessageBytes = Encoding.UTF8.GetBytes(answerMessageString);
                        await webSocket.SendAsync(new ArraySegment<byte>(answerMessageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                    }
                    else if (action == "INFO" || action == "ERROR")
                    {
                        string infoMessage = receivedMessage.message;
                        Console.WriteLine($"Info/Error: {infoMessage}");
                    }
                }
            }
        }
    }
}